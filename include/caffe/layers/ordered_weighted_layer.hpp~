#ifndef CAFFE_ORDERED_WEIGHTED_LAYER_HPP_
#define CAFFE_ORDERED_WEIGHTED_LAYER_HPP_

namespace caffe {

template <typename Dtype>
class OrderedWeightedLayer : public Layer<Dtype> {
  public:
    explicit OrderWeightedLayer(const LayerParameter& param)
        : Layer<Dtype>(param) {}
    virtual void LayerSetup(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top);
    virtual void Reshape(const vector<Blob<Dtype>*>& bottom, const vectorM<Blob>*> top);
    
    virtual inline const char* type() const {return "Ordered Weighted"; }
    virtual inline const int MinBottomBlobs() const {return 1;}
    virtual inline int ExactNumTopBlobs() const {return 1;}

  protected:
    virtual void Forward_cpu(const vector<Blob<Dtype>*>& bottom,
      const vector<Blob<Dtype>*>& top);
    virtual void Forward_gpu(const vector<Blob<Dtype>*>& bottom,
      const vector<Blob<Dtype>*>& top);
    virtual void Backward_cpu(const vector<Blob<Dtype>*>& top,
      const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom);
    virtual void Backward_gpu(const vector<Blob<Dtype>*>& top,
      const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom);
    
   OrderedWeightedParameter_OrderOp order_;
   bool display_;
};

} //namespace caffe


#endif //CAFFE_ORDERED_WEIGHTER_LAYER_HPP_

class EltwiseLayer : public Layer<Dtype> {
 public:
  explicit EltwiseLayer(const LayerParameter& param)
      : Layer<Dtype>(param) {}
  virtual void LayerSetUp(const vector<Blob<Dtype>*>& bottom,
      const vector<Blob<Dtype>*>& top);
  virtual void Reshape(const vector<Blob<Dtype>*>& bottom,
      const vector<Blob<Dtype>*>& top);

  virtual inline const char* type() const { return "Eltwise"; }
  virtual inline int MinBottomBlobs() const { return 1; }
  virtual inline int ExactNumTopBlobs() const { return 1; }

 protected:
  virtual void Forward_cpu(const vector<Blob<Dtype>*>& bottom,
      const vector<Blob<Dtype>*>& top);
  virtual void Forward_gpu(const vector<Blob<Dtype>*>& bottom,
      const vector<Blob<Dtype>*>& top);
  virtual void Backward_cpu(const vector<Blob<Dtype>*>& top,
      const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom);
  virtual void Backward_gpu(const vector<Blob<Dtype>*>& top,
      const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom);

  EltwiseParameter_EltwiseOp op_;
  vector<Dtype> coeffs_;
  Blob<int> max_idx_;

  bool stable_prod_grad_;
  bool prod_weight_;
  bool display_;
};

}  // namespace caffe

#endif  // CAFFE_ELTWISE_LAYER_HPP_


